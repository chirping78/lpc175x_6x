/**********************************************************************
* $Id$		abstract.txt 			
*//**
* @file		abstract.txt 
* @brief	Example description file
* @version	2.0
* @date		
* @author	NXP MCU SW Application Team
*
* Copyright(C) 2010, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
**********************************************************************/
  
@Example description:
	Purpose:
		This example describes how to test CAN peripheral of LPC17xx.
	Process:
		This demo need a CAN analyser or, another CAN device on bus.
        After initializing, the LPC17xx will transmit first message with ID 0x200 on bus.
        If success, it will wait for any trigger on wake up source 0 and then start transmit again.
        The device always listen message on the bus with ID 0x100. Whenever it receive, 
        it will reply back the message to bus with ID 0x200. 
			
@Directory contents:
	\EWARM: includes EWARM (IAR) project and configuration files
	\Keil:	includes RVMDK (Keil)project and configuration files 
	 
	lpc17xx_libcfg.h: Library configuration file - include needed driver library for this example 
	makefile: Example's makefile (to build with GNU toolchain)
	Can_SimpleTxRx.c: Main program

@How to run:
	Hardware configuration:		
		This example was tested only on:
			Keil MCB1700 with LPC1768 vers.1
				These jumpers must be configured as following:
				- VDDIO: ON
				- VDDREGS: ON 
				- VBUS: ON
				- Remain jumpers: OFF
				
		CAN connection:
			- CAN1-Pin2 connects to CAN Analyzser-Pin2 (CAN-L)
			- CAN1-Pin7 connects to CAN Analyzser-Pin7 (CAN-H)
            - GND-Pin3 connects to  CAN Analyzser-Pin3 (GND)
				
		Serial display configuration:(e.g: TeraTerm, Hyperterminal, Flash Magic...) 
			– 115200bps 
			– 8 data bit 
			– No parity 
			– 1 stop bit 
			– No flow control 
	
	Running mode:
		This example can run on RAM/ROM mode.
					
		Note: If want to burn hex file to board by using Flash Magic, these jumpers need
		to be connected:
			- MCB1700 with LPC1768 ver.1:
				+ RST: ON
				+ ISP: ON
			- IAR LPC1768 KickStart vers.A:
				+ RST_E: ON
				+ ISP_E: ON
		
		(Please reference "LPC1000 Software Development Toolchain" - chapter 4 "Creating and working with
		LPC1000CMSIS project" for more information)
	
	Step to run:
		- Step 1: Build example.
		- Step 2: Burn hex file into board (if run on ROM mode)
		- Step 3: Connect UART0 on this board to COM port on your computer
		- Step 4: Configure hardware and serial display as above instruction 
		- Step 5: Use a CAN analyser and set bitrate to 500kb/ss Start capture the bus
        - Step 6: Create new transmit Message by Go to Transmit->New Message
                    Type in ID = 0x100, DLC = 8 and dont check anything
                    Type whatever data you want to transmit, device will feedback it
        - Step 7: Run example and observe result on serial display.
                    Press INT button on the target board, the LPC17xx will send a message with ID 0x200.
			
		(Pls see "LPC17xx Example Description" document - chapter "Examples > CAN > CAN_simple_tx_rx"
		for more details)
		
@Tip:
	- Open \EWARM\*.eww project file to run example on IAR
	- Open \RVMDK\*.uvproj project file to run example on Keil